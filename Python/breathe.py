import math
import sys
import colorsys

r,g,b = 0xCC,0xDD,0xFF #bluish glow
numSteps = 100


#colorsys expects RGB values in the range [0,1]
r,g,b = [ x / 255.0 for x in r,g,b]

# convert to HSV colorspace (hue, saturation, value)
# this makes it easier to adjust the values since we only have to
# vary the value (brightness)
h,s,v = colorsys.rgb_to_hsv (r,g,b)

sys.stdout.write("/* this array generated by breathe.py\n"
    "using LED 'breathing' function by Sean Voisen.\n"
    "http://sean.voisen.org/blog/2011/10/breathing-led-with-arduino/ */\n"
    "#define numSteps %d\n" % numSteps
    )
sys.stdout.write("int breath[numSteps] = {")

for n in range(numSteps):

    if not n % 10:
        sys.stdout.write("\n")

    # uncomment the last bit to have it vary from 0.5 to 1.0 instead
    scale = (
        math.exp( math.cos( n * math.pi / numSteps) )
            - ( 1 / math.e)
        ) / (math.e - (1 / math.e)) # / 2 + .5

    # NeoPixels library expects integer RGB values in the range [0,255]
    r,g,b = [ int(x * 255) for x in colorsys.hsv_to_rgb(h,s,v*scale) ]

    #pack the r,g,b values into one hex value
    rgb = str.format('0x{:06X}', (r << 16) + (g << 8) + b)
    sys.stdout.write("%s" % rgb)

    if n < numSteps - 1:
        sys.stdout.write(", ")

sys.stdout.write("};\n")
